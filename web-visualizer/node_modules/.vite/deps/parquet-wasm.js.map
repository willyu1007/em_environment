{
  "version": 3,
  "sources": ["../../parquet-wasm/esm/parquet_wasm.js"],
  "sourcesContent": ["let wasm;\n\nconst heap = new Array(128).fill(undefined);\n\nheap.push(undefined, null, true, false);\n\nlet heap_next = heap.length;\n\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length) heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n\n    heap[idx] = obj;\n    return idx;\n}\n\nfunction getObject(idx) { return heap[idx]; }\n\nfunction dropObject(idx) {\n    if (idx < 132) return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\n\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropObject(idx);\n    return ret;\n}\n\nconst cachedTextDecoder = (typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-8', { ignoreBOM: true, fatal: true }) : { decode: () => { throw Error('TextDecoder not available') } } );\n\nif (typeof TextDecoder !== 'undefined') { cachedTextDecoder.decode(); };\n\nlet cachedUint8Memory0 = null;\n\nfunction getUint8Memory0() {\n    if (cachedUint8Memory0 === null || cachedUint8Memory0.byteLength === 0) {\n        cachedUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachedUint8Memory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\n\nfunction isLikeNone(x) {\n    return x === undefined || x === null;\n}\n\nlet cachedFloat64Memory0 = null;\n\nfunction getFloat64Memory0() {\n    if (cachedFloat64Memory0 === null || cachedFloat64Memory0.byteLength === 0) {\n        cachedFloat64Memory0 = new Float64Array(wasm.memory.buffer);\n    }\n    return cachedFloat64Memory0;\n}\n\nlet cachedInt32Memory0 = null;\n\nfunction getInt32Memory0() {\n    if (cachedInt32Memory0 === null || cachedInt32Memory0.byteLength === 0) {\n        cachedInt32Memory0 = new Int32Array(wasm.memory.buffer);\n    }\n    return cachedInt32Memory0;\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nconst cachedTextEncoder = (typeof TextEncoder !== 'undefined' ? new TextEncoder('utf-8') : { encode: () => { throw Error('TextEncoder not available') } } );\n\nconst encodeString = (typeof cachedTextEncoder.encodeInto === 'function'\n    ? function (arg, view) {\n    return cachedTextEncoder.encodeInto(arg, view);\n}\n    : function (arg, view) {\n    const buf = cachedTextEncoder.encode(arg);\n    view.set(buf);\n    return {\n        read: arg.length,\n        written: buf.length\n    };\n});\n\nfunction passStringToWasm0(arg, malloc, realloc) {\n\n    if (realloc === undefined) {\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = malloc(buf.length, 1) >>> 0;\n        getUint8Memory0().subarray(ptr, ptr + buf.length).set(buf);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    }\n\n    let len = arg.length;\n    let ptr = malloc(len, 1) >>> 0;\n\n    const mem = getUint8Memory0();\n\n    let offset = 0;\n\n    for (; offset < len; offset++) {\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F) break;\n        mem[ptr + offset] = code;\n    }\n\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = realloc(ptr, len, len = offset + arg.length * 3, 1) >>> 0;\n        const view = getUint8Memory0().subarray(ptr + offset, ptr + len);\n        const ret = encodeString(arg, view);\n\n        offset += ret.written;\n        ptr = realloc(ptr, len, offset, 1) >>> 0;\n    }\n\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\n\nlet cachedBigInt64Memory0 = null;\n\nfunction getBigInt64Memory0() {\n    if (cachedBigInt64Memory0 === null || cachedBigInt64Memory0.byteLength === 0) {\n        cachedBigInt64Memory0 = new BigInt64Array(wasm.memory.buffer);\n    }\n    return cachedBigInt64Memory0;\n}\n\nfunction debugString(val) {\n    // primitive types\n    const type = typeof val;\n    if (type == 'number' || type == 'boolean' || val == null) {\n        return  `${val}`;\n    }\n    if (type == 'string') {\n        return `\"${val}\"`;\n    }\n    if (type == 'symbol') {\n        const description = val.description;\n        if (description == null) {\n            return 'Symbol';\n        } else {\n            return `Symbol(${description})`;\n        }\n    }\n    if (type == 'function') {\n        const name = val.name;\n        if (typeof name == 'string' && name.length > 0) {\n            return `Function(${name})`;\n        } else {\n            return 'Function';\n        }\n    }\n    // objects\n    if (Array.isArray(val)) {\n        const length = val.length;\n        let debug = '[';\n        if (length > 0) {\n            debug += debugString(val[0]);\n        }\n        for(let i = 1; i < length; i++) {\n            debug += ', ' + debugString(val[i]);\n        }\n        debug += ']';\n        return debug;\n    }\n    // Test for built-in\n    const builtInMatches = /\\[object ([^\\]]+)\\]/.exec(toString.call(val));\n    let className;\n    if (builtInMatches.length > 1) {\n        className = builtInMatches[1];\n    } else {\n        // Failed to match the standard '[object ClassName]'\n        return toString.call(val);\n    }\n    if (className == 'Object') {\n        // we're a user defined class or Object\n        // JSON.stringify avoids problems with cycles, and is generally much\n        // easier than looping through ownProperties of `val`.\n        try {\n            return 'Object(' + JSON.stringify(val) + ')';\n        } catch (_) {\n            return 'Object';\n        }\n    }\n    // errors\n    if (val instanceof Error) {\n        return `${val.name}: ${val.message}\\n${val.stack}`;\n    }\n    // TODO we could test for more things here, like `Set`s and `Map`s.\n    return className;\n}\n\nconst CLOSURE_DTORS = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(state => {\n    wasm.__wbindgen_export_2.get(state.dtor)(state.a, state.b)\n});\n\nfunction makeMutClosure(arg0, arg1, dtor, f) {\n    const state = { a: arg0, b: arg1, cnt: 1, dtor };\n    const real = (...args) => {\n        // First up with a closure we increment the internal reference\n        // count. This ensures that the Rust closure environment won't\n        // be deallocated while we're invoking it.\n        state.cnt++;\n        const a = state.a;\n        state.a = 0;\n        try {\n            return f(a, state.b, ...args);\n        } finally {\n            if (--state.cnt === 0) {\n                wasm.__wbindgen_export_2.get(state.dtor)(a, state.b);\n                CLOSURE_DTORS.unregister(state);\n            } else {\n                state.a = a;\n            }\n        }\n    };\n    real.original = state;\n    CLOSURE_DTORS.register(real, state, state);\n    return real;\n}\nfunction __wbg_adapter_50(arg0, arg1, arg2) {\n    wasm._dyn_core__ops__function__FnMut__A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h1de40baa0df51db0(arg0, arg1, addHeapObject(arg2));\n}\n\nfunction passArray8ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 1, 1) >>> 0;\n    getUint8Memory0().set(arg, ptr / 1);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n/**\n* Read a Parquet file into Arrow data.\n*\n* This returns an Arrow table in WebAssembly memory. To transfer the Arrow table to JavaScript\n* memory you have two options:\n*\n* - (Easier): Call {@linkcode Table.intoIPCStream} to construct a buffer that can be parsed with\n*   Arrow JS's `tableFromIPC` function.\n* - (More performant but bleeding edge): Call {@linkcode Table.intoFFI} to construct a data\n*   representation that can be parsed zero-copy from WebAssembly with\n*   [arrow-js-ffi](https://github.com/kylebarron/arrow-js-ffi) using `parseTable`.\n*\n* Example with IPC stream:\n*\n* ```js\n* import { tableFromIPC } from \"apache-arrow\";\n* import initWasm, {readParquet} from \"parquet-wasm\";\n*\n* // Instantiate the WebAssembly context\n* await initWasm();\n*\n* const resp = await fetch(\"https://example.com/file.parquet\");\n* const parquetUint8Array = new Uint8Array(await resp.arrayBuffer());\n* const arrowWasmTable = readParquet(parquetUint8Array);\n* const arrowTable = tableFromIPC(arrowWasmTable.intoIPCStream());\n* ```\n*\n* Example with `arrow-js-ffi`:\n*\n* ```js\n* import { parseTable } from \"arrow-js-ffi\";\n* import initWasm, {readParquet, wasmMemory} from \"parquet-wasm\";\n*\n* // Instantiate the WebAssembly context\n* await initWasm();\n* const WASM_MEMORY = wasmMemory();\n*\n* const resp = await fetch(\"https://example.com/file.parquet\");\n* const parquetUint8Array = new Uint8Array(await resp.arrayBuffer());\n* const arrowWasmTable = readParquet(parquetUint8Array);\n* const ffiTable = arrowWasmTable.intoFFI();\n* const arrowTable = parseTable(\n*   WASM_MEMORY.buffer,\n*   ffiTable.arrayAddrs(),\n*   ffiTable.schemaAddr()\n* );\n* ```\n*\n* @param parquet_file Uint8Array containing Parquet data\n* @param options\n*\n*    Options for reading Parquet data. Optional keys include:\n*\n*    - `batchSize`: The number of rows in each batch. If not provided, the upstream parquet\n*           default is 1024.\n*    - `rowGroups`: Only read data from the provided row group indexes.\n*    - `limit`: Provide a limit to the number of rows to be read.\n*    - `offset`: Provide an offset to skip over the given number of rows.\n*    - `columns`: The column names from the file to read.\n* @param {Uint8Array} parquet_file\n* @param {ReaderOptions | undefined} [options]\n* @returns {Table}\n*/\nexport function readParquet(parquet_file, options) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passArray8ToWasm0(parquet_file, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.readParquet(retptr, ptr0, len0, isLikeNone(options) ? 0 : addHeapObject(options));\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return Table.__wrap(r0);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\n/**\n* Read an Arrow schema from a Parquet file in memory.\n*\n* This returns an Arrow schema in WebAssembly memory. To transfer the Arrow schema to JavaScript\n* memory you have two options:\n*\n* - (Easier): Call {@linkcode Schema.intoIPCStream} to construct a buffer that can be parsed with\n*   Arrow JS's `tableFromIPC` function. This results in an Arrow JS Table with zero rows but a\n*   valid schema.\n* - (More performant but bleeding edge): Call {@linkcode Schema.intoFFI} to construct a data\n*   representation that can be parsed zero-copy from WebAssembly with\n*   [arrow-js-ffi](https://github.com/kylebarron/arrow-js-ffi) using `parseSchema`.\n*\n* Example with IPC Stream:\n*\n* ```js\n* import { tableFromIPC } from \"apache-arrow\";\n* import initWasm, {readSchema} from \"parquet-wasm\";\n*\n* // Instantiate the WebAssembly context\n* await initWasm();\n*\n* const resp = await fetch(\"https://example.com/file.parquet\");\n* const parquetUint8Array = new Uint8Array(await resp.arrayBuffer());\n* const arrowWasmSchema = readSchema(parquetUint8Array);\n* const arrowTable = tableFromIPC(arrowWasmSchema.intoIPCStream());\n* const arrowSchema = arrowTable.schema;\n* ```\n*\n* Example with `arrow-js-ffi`:\n*\n* ```js\n* import { parseSchema } from \"arrow-js-ffi\";\n* import initWasm, {readSchema, wasmMemory} from \"parquet-wasm\";\n*\n* // Instantiate the WebAssembly context\n* await initWasm();\n* const WASM_MEMORY = wasmMemory();\n*\n* const resp = await fetch(\"https://example.com/file.parquet\");\n* const parquetUint8Array = new Uint8Array(await resp.arrayBuffer());\n* const arrowWasmSchema = readSchema(parquetUint8Array);\n* const ffiSchema = arrowWasmSchema.intoFFI();\n* const arrowTable = parseSchema(WASM_MEMORY.buffer, ffiSchema.addr());\n* const arrowSchema = arrowTable.schema;\n* ```\n*\n* @param parquet_file Uint8Array containing Parquet data\n* @param {Uint8Array} parquet_file\n* @returns {Schema}\n*/\nexport function readSchema(parquet_file) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passArray8ToWasm0(parquet_file, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.readSchema(retptr, ptr0, len0);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return Schema.__wrap(r0);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\nfunction _assertClass(instance, klass) {\n    if (!(instance instanceof klass)) {\n        throw new Error(`expected instance of ${klass.name}`);\n    }\n    return instance.ptr;\n}\n\nfunction getArrayU8FromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return getUint8Memory0().subarray(ptr / 1, ptr / 1 + len);\n}\n/**\n* Write Arrow data to a Parquet file.\n*\n* For example, to create a Parquet file with Snappy compression:\n*\n* ```js\n* import { tableToIPC } from \"apache-arrow\";\n* // Edit the `parquet-wasm` import as necessary\n* import initWasm, {\n*   Table,\n*   WriterPropertiesBuilder,\n*   Compression,\n*   writeParquet,\n* } from \"parquet-wasm\";\n*\n* // Instantiate the WebAssembly context\n* await initWasm();\n*\n* // Given an existing arrow JS table under `table`\n* const wasmTable = Table.fromIPCStream(tableToIPC(table, \"stream\"));\n* const writerProperties = new WriterPropertiesBuilder()\n*   .setCompression(Compression.SNAPPY)\n*   .build();\n* const parquetUint8Array = writeParquet(wasmTable, writerProperties);\n* ```\n*\n* If `writerProperties` is not provided or is `null`, the default writer properties will be used.\n* This is equivalent to `new WriterPropertiesBuilder().build()`.\n*\n* @param table A {@linkcode Table} representation in WebAssembly memory.\n* @param writer_properties (optional) Configuration for writing to Parquet. Use the {@linkcode\n* WriterPropertiesBuilder} to build a writing configuration, then call `.build()` to create an\n* immutable writer properties to pass in here.\n* @returns Uint8Array containing written Parquet data.\n* @param {Table} table\n* @param {WriterProperties | undefined} [writer_properties]\n* @returns {Uint8Array}\n*/\nexport function writeParquet(table, writer_properties) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        _assertClass(table, Table);\n        var ptr0 = table.__destroy_into_raw();\n        let ptr1 = 0;\n        if (!isLikeNone(writer_properties)) {\n            _assertClass(writer_properties, WriterProperties);\n            ptr1 = writer_properties.__destroy_into_raw();\n        }\n        wasm.writeParquet(retptr, ptr0, ptr1);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        var r3 = getInt32Memory0()[retptr / 4 + 3];\n        if (r3) {\n            throw takeObject(r2);\n        }\n        var v3 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1, 1);\n        return v3;\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\n/**\n* Read a Parquet file into a stream of Arrow `RecordBatch`es.\n*\n* This returns a ReadableStream containing RecordBatches in WebAssembly memory. To transfer the\n* Arrow table to JavaScript memory you have two options:\n*\n* - (Easier): Call {@linkcode RecordBatch.intoIPCStream} to construct a buffer that can be parsed\n*   with Arrow JS's `tableFromIPC` function. (The table will have a single internal record\n*   batch).\n* - (More performant but bleeding edge): Call {@linkcode RecordBatch.intoFFI} to construct a data\n*   representation that can be parsed zero-copy from WebAssembly with\n*   [arrow-js-ffi](https://github.com/kylebarron/arrow-js-ffi) using `parseRecordBatch`.\n*\n* Example with IPC stream:\n*\n* ```js\n* import { tableFromIPC } from \"apache-arrow\";\n* import initWasm, {readParquetStream} from \"parquet-wasm\";\n*\n* // Instantiate the WebAssembly context\n* await initWasm();\n*\n* const stream = await wasm.readParquetStream(url);\n*\n* const batches = [];\n* for await (const wasmRecordBatch of stream) {\n*   const arrowTable = tableFromIPC(wasmRecordBatch.intoIPCStream());\n*   batches.push(...arrowTable.batches);\n* }\n* const table = new arrow.Table(batches);\n* ```\n*\n* Example with `arrow-js-ffi`:\n*\n* ```js\n* import { parseRecordBatch } from \"arrow-js-ffi\";\n* import initWasm, {readParquetStream, wasmMemory} from \"parquet-wasm\";\n*\n* // Instantiate the WebAssembly context\n* await initWasm();\n* const WASM_MEMORY = wasmMemory();\n*\n* const stream = await wasm.readParquetStream(url);\n*\n* const batches = [];\n* for await (const wasmRecordBatch of stream) {\n*   const ffiRecordBatch = wasmRecordBatch.intoFFI();\n*   const recordBatch = parseRecordBatch(\n*     WASM_MEMORY.buffer,\n*     ffiRecordBatch.arrayAddr(),\n*     ffiRecordBatch.schemaAddr(),\n*     true\n*   );\n*   batches.push(recordBatch);\n* }\n* const table = new arrow.Table(batches);\n* ```\n*\n* @param url URL to Parquet file\n* @param {string} url\n* @param {number | undefined} [content_length]\n* @returns {Promise<ReadableStream>}\n*/\nexport function readParquetStream(url, content_length) {\n    const ptr0 = passStringToWasm0(url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len0 = WASM_VECTOR_LEN;\n    const ret = wasm.readParquetStream(ptr0, len0, !isLikeNone(content_length), isLikeNone(content_length) ? 0 : content_length);\n    return takeObject(ret);\n}\n\nlet cachedUint32Memory0 = null;\n\nfunction getUint32Memory0() {\n    if (cachedUint32Memory0 === null || cachedUint32Memory0.byteLength === 0) {\n        cachedUint32Memory0 = new Uint32Array(wasm.memory.buffer);\n    }\n    return cachedUint32Memory0;\n}\n\nfunction getArrayJsValueFromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    const mem = getUint32Memory0();\n    const slice = mem.subarray(ptr / 4, ptr / 4 + len);\n    const result = [];\n    for (let i = 0; i < slice.length; i++) {\n        result.push(takeObject(slice[i]));\n    }\n    return result;\n}\n\nfunction handleError(f, args) {\n    try {\n        return f.apply(this, args);\n    } catch (e) {\n        wasm.__wbindgen_exn_store(addHeapObject(e));\n    }\n}\n\nfunction getArrayU32FromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return getUint32Memory0().subarray(ptr / 4, ptr / 4 + len);\n}\n/**\n* Returns a handle to this wasm instance's `WebAssembly.Memory`\n* @returns {Memory}\n*/\nexport function wasmMemory() {\n    const ret = wasm.wasmMemory();\n    return takeObject(ret);\n}\n\n/**\n* Returns a handle to this wasm instance's `WebAssembly.Table` which is the indirect function\n* table used by Rust\n* @returns {FunctionTable}\n*/\nexport function _functionTable() {\n    const ret = wasm._functionTable();\n    return takeObject(ret);\n}\n\nfunction __wbg_adapter_285(arg0, arg1, arg2, arg3) {\n    wasm.wasm_bindgen__convert__closures__invoke2_mut__h26b6dc7d05b06fdf(arg0, arg1, addHeapObject(arg2), addHeapObject(arg3));\n}\n\n/**\n* The Parquet version to use when writing\n*/\nexport const WriterVersion = Object.freeze({ V1:0,\"0\":\"V1\",V2:1,\"1\":\"V2\", });\n/**\n* Controls the level of statistics to be computed by the writer\n*/\nexport const EnabledStatistics = Object.freeze({\n/**\n* Compute no statistics\n*/\nNone:0,\"0\":\"None\",\n/**\n* Compute chunk-level statistics but not page-level\n*/\nChunk:1,\"1\":\"Chunk\",\n/**\n* Compute page-level and chunk-level statistics\n*/\nPage:2,\"2\":\"Page\", });\n/**\n* Encodings supported by Parquet.\n* Not all encodings are valid for all types. These enums are also used to specify the\n* encoding of definition and repetition levels.\n*/\nexport const Encoding = Object.freeze({\n/**\n* Default byte encoding.\n* - BOOLEAN - 1 bit per value, 0 is false; 1 is true.\n* - INT32 - 4 bytes per value, stored as little-endian.\n* - INT64 - 8 bytes per value, stored as little-endian.\n* - FLOAT - 4 bytes per value, stored as little-endian.\n* - DOUBLE - 8 bytes per value, stored as little-endian.\n* - BYTE_ARRAY - 4 byte length stored as little endian, followed by bytes.\n* - FIXED_LEN_BYTE_ARRAY - just the bytes are stored.\n*/\nPLAIN:0,\"0\":\"PLAIN\",\n/**\n* **Deprecated** dictionary encoding.\n*\n* The values in the dictionary are encoded using PLAIN encoding.\n* Since it is deprecated, RLE_DICTIONARY encoding is used for a data page, and\n* PLAIN encoding is used for dictionary page.\n*/\nPLAIN_DICTIONARY:1,\"1\":\"PLAIN_DICTIONARY\",\n/**\n* Group packed run length encoding.\n*\n* Usable for definition/repetition levels encoding and boolean values.\n*/\nRLE:2,\"2\":\"RLE\",\n/**\n* Bit packed encoding.\n*\n* This can only be used if the data has a known max width.\n* Usable for definition/repetition levels encoding.\n*/\nBIT_PACKED:3,\"3\":\"BIT_PACKED\",\n/**\n* Delta encoding for integers, either INT32 or INT64.\n*\n* Works best on sorted data.\n*/\nDELTA_BINARY_PACKED:4,\"4\":\"DELTA_BINARY_PACKED\",\n/**\n* Encoding for byte arrays to separate the length values and the data.\n*\n* The lengths are encoded using DELTA_BINARY_PACKED encoding.\n*/\nDELTA_LENGTH_BYTE_ARRAY:5,\"5\":\"DELTA_LENGTH_BYTE_ARRAY\",\n/**\n* Incremental encoding for byte arrays.\n*\n* Prefix lengths are encoded using DELTA_BINARY_PACKED encoding.\n* Suffixes are stored using DELTA_LENGTH_BYTE_ARRAY encoding.\n*/\nDELTA_BYTE_ARRAY:6,\"6\":\"DELTA_BYTE_ARRAY\",\n/**\n* Dictionary encoding.\n*\n* The ids are encoded using the RLE encoding.\n*/\nRLE_DICTIONARY:7,\"7\":\"RLE_DICTIONARY\",\n/**\n* Encoding for floating-point data.\n*\n* K byte-streams are created where K is the size in bytes of the data type.\n* The individual bytes of an FP value are scattered to the corresponding stream and\n* the streams are concatenated.\n* This itself does not reduce the size of the data but can lead to better compression\n* afterwards.\n*/\nBYTE_STREAM_SPLIT:8,\"8\":\"BYTE_STREAM_SPLIT\", });\n/**\n* Supported compression algorithms.\n*\n* Codecs added in format version X.Y can be read by readers based on X.Y and later.\n* Codec support may vary between readers based on the format version and\n* libraries available at runtime.\n*/\nexport const Compression = Object.freeze({ UNCOMPRESSED:0,\"0\":\"UNCOMPRESSED\",SNAPPY:1,\"1\":\"SNAPPY\",GZIP:2,\"2\":\"GZIP\",BROTLI:3,\"3\":\"BROTLI\",\n/**\n* @deprecated as of Parquet 2.9.0.\n* Switch to LZ4_RAW\n*/\nLZ4:4,\"4\":\"LZ4\",ZSTD:5,\"5\":\"ZSTD\",LZ4_RAW:6,\"6\":\"LZ4_RAW\",LZO:7,\"7\":\"LZO\", });\n\nconst ColumnChunkMetaDataFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_columnchunkmetadata_free(ptr >>> 0));\n/**\n* Metadata for a Parquet column chunk.\n*/\nexport class ColumnChunkMetaData {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(ColumnChunkMetaData.prototype);\n        obj.__wbg_ptr = ptr;\n        ColumnChunkMetaDataFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ColumnChunkMetaDataFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_columnchunkmetadata_free(ptr);\n    }\n    /**\n    * File where the column chunk is stored.\n    *\n    * If not set, assumed to belong to the same file as the metadata.\n    * This path is relative to the current file.\n    * @returns {string | undefined}\n    */\n    filePath() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.columnchunkmetadata_filePath(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v1;\n            if (r0 !== 0) {\n                v1 = getStringFromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1, 1);\n            }\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Byte offset in `file_path()`.\n    * @returns {bigint}\n    */\n    fileOffset() {\n        const ret = wasm.columnchunkmetadata_fileOffset(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n    * Path (or identifier) of this column.\n    * @returns {(string)[]}\n    */\n    columnPath() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.columnchunkmetadata_columnPath(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v1 = getArrayJsValueFromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 4, 4);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * All encodings used for this column.\n    * @returns {any[]}\n    */\n    encodings() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.columnchunkmetadata_encodings(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v1 = getArrayJsValueFromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 4, 4);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Total number of values in this column chunk.\n    * @returns {number}\n    */\n    numValues() {\n        const ret = wasm.columnchunkmetadata_numValues(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n    * Compression for this column.\n    * @returns {Compression}\n    */\n    compression() {\n        const ret = wasm.columnchunkmetadata_compression(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n    * Returns the total compressed data size of this column chunk.\n    * @returns {number}\n    */\n    compressedSize() {\n        const ret = wasm.columnchunkmetadata_compressedSize(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n    * Returns the total uncompressed data size of this column chunk.\n    * @returns {number}\n    */\n    uncompressedSize() {\n        const ret = wasm.columnchunkmetadata_uncompressedSize(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst FFIArrowArrayFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_ffiarrowarray_free(ptr >>> 0));\n/**\n*/\nexport class FFIArrowArray {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        FFIArrowArrayFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_ffiarrowarray_free(ptr);\n    }\n    /**\n    * @returns {number}\n    */\n    addr() {\n        const ret = wasm.ffiarrowarray_addr(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n}\n\nconst FFIArrowSchemaFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_ffiarrowschema_free(ptr >>> 0));\n/**\n*/\nexport class FFIArrowSchema {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(FFIArrowSchema.prototype);\n        obj.__wbg_ptr = ptr;\n        FFIArrowSchemaFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        FFIArrowSchemaFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_ffiarrowschema_free(ptr);\n    }\n    /**\n    * Access the pointer to the\n    * [`ArrowSchema`](https://arrow.apache.org/docs/format/CDataInterface.html#structure-definitions)\n    * struct. This can be viewed or copied (without serialization) to an Arrow JS `Field` by\n    * using [`arrow-js-ffi`](https://github.com/kylebarron/arrow-js-ffi). You can access the\n    * [`WebAssembly.Memory`](https://developer.mozilla.org/en-US/docs/WebAssembly/JavaScript_interface/Memory)\n    * instance by using {@linkcode wasmMemory}.\n    *\n    * **Example**:\n    *\n    * ```ts\n    * import { parseRecordBatch } from \"arrow-js-ffi\";\n    *\n    * const wasmRecordBatch: FFIRecordBatch = ...\n    * const wasmMemory: WebAssembly.Memory = wasmMemory();\n    *\n    * // Pass `true` to copy arrays across the boundary instead of creating views.\n    * const jsRecordBatch = parseRecordBatch(\n    *   wasmMemory.buffer,\n    *   wasmRecordBatch.arrayAddr(),\n    *   wasmRecordBatch.schemaAddr(),\n    *   true\n    * );\n    * ```\n    * @returns {number}\n    */\n    addr() {\n        const ret = wasm.ffiarrowschema_addr(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n}\n\nconst FFIDataFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_ffidata_free(ptr >>> 0));\n/**\n* An Arrow array including associated field metadata.\n*\n* Using [`arrow-js-ffi`](https://github.com/kylebarron/arrow-js-ffi), you can view or copy Arrow\n* these objects to JavaScript.\n*/\nexport class FFIData {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        FFIDataFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_ffidata_free(ptr);\n    }\n    /**\n    * @returns {number}\n    */\n    arrayAddr() {\n        const ret = wasm.ffiarrowschema_addr(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {number}\n    */\n    schema_addr() {\n        const ret = wasm.ffidata_schema_addr(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n}\n\nconst FFIRecordBatchFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_ffirecordbatch_free(ptr >>> 0));\n/**\n* A representation of an Arrow RecordBatch in WebAssembly memory exposed as FFI-compatible\n* structs through the Arrow C Data Interface.\n*/\nexport class FFIRecordBatch {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(FFIRecordBatch.prototype);\n        obj.__wbg_ptr = ptr;\n        FFIRecordBatchFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        FFIRecordBatchFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_ffirecordbatch_free(ptr);\n    }\n    /**\n    * Access the pointer to the\n    * [`ArrowArray`](https://arrow.apache.org/docs/format/CDataInterface.html#structure-definitions)\n    * struct. This can be viewed or copied (without serialization) to an Arrow JS `RecordBatch` by\n    * using [`arrow-js-ffi`](https://github.com/kylebarron/arrow-js-ffi). You can access the\n    * [`WebAssembly.Memory`](https://developer.mozilla.org/en-US/docs/WebAssembly/JavaScript_interface/Memory)\n    * instance by using {@linkcode wasmMemory}.\n    *\n    * **Example**:\n    *\n    * ```ts\n    * import { parseRecordBatch } from \"arrow-js-ffi\";\n    *\n    * const wasmRecordBatch: FFIRecordBatch = ...\n    * const wasmMemory: WebAssembly.Memory = wasmMemory();\n    *\n    * // Pass `true` to copy arrays across the boundary instead of creating views.\n    * const jsRecordBatch = parseRecordBatch(\n    *   wasmMemory.buffer,\n    *   wasmRecordBatch.arrayAddr(),\n    *   wasmRecordBatch.schemaAddr(),\n    *   true\n    * );\n    * ```\n    * @returns {number}\n    */\n    arrayAddr() {\n        const ret = wasm.ffirecordbatch_arrayAddr(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n    * Access the pointer to the\n    * [`ArrowSchema`](https://arrow.apache.org/docs/format/CDataInterface.html#structure-definitions)\n    * struct. This can be viewed or copied (without serialization) to an Arrow JS `Field` by\n    * using [`arrow-js-ffi`](https://github.com/kylebarron/arrow-js-ffi). You can access the\n    * [`WebAssembly.Memory`](https://developer.mozilla.org/en-US/docs/WebAssembly/JavaScript_interface/Memory)\n    * instance by using {@linkcode wasmMemory}.\n    *\n    * **Example**:\n    *\n    * ```ts\n    * import { parseRecordBatch } from \"arrow-js-ffi\";\n    *\n    * const wasmRecordBatch: FFIRecordBatch = ...\n    * const wasmMemory: WebAssembly.Memory = wasmMemory();\n    *\n    * // Pass `true` to copy arrays across the boundary instead of creating views.\n    * const jsRecordBatch = parseRecordBatch(\n    *   wasmMemory.buffer,\n    *   wasmRecordBatch.arrayAddr(),\n    *   wasmRecordBatch.schemaAddr(),\n    *   true\n    * );\n    * ```\n    * @returns {number}\n    */\n    schemaAddr() {\n        const ret = wasm.ffirecordbatch_schemaAddr(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n}\n\nconst FFITableFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_ffitable_free(ptr >>> 0));\n/**\n* A representation of an Arrow Table in WebAssembly memory exposed as FFI-compatible\n* structs through the Arrow C Data Interface.\n*/\nexport class FFITable {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(FFITable.prototype);\n        obj.__wbg_ptr = ptr;\n        FFITableFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        FFITableFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_ffitable_free(ptr);\n    }\n    /**\n    * Get the total number of record batches in the table\n    * @returns {number}\n    */\n    numBatches() {\n        const ret = wasm.ffitable_numBatches(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n    * Get the pointer to one ArrowSchema FFI struct\n    * @returns {number}\n    */\n    schemaAddr() {\n        const ret = wasm.ffitable_schemaAddr(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n    * Get the pointer to one ArrowArray FFI struct for a given chunk index and column index\n    *\n    * Access the pointer to one\n    * [`ArrowArray`](https://arrow.apache.org/docs/format/CDataInterface.html#structure-definitions)\n    * struct representing one of the internal `RecordBatch`es. This can be viewed or copied (without serialization) to an Arrow JS `RecordBatch` by\n    * using [`arrow-js-ffi`](https://github.com/kylebarron/arrow-js-ffi). You can access the\n    * [`WebAssembly.Memory`](https://developer.mozilla.org/en-US/docs/WebAssembly/JavaScript_interface/Memory)\n    * instance by using {@linkcode wasmMemory}.\n    *\n    * **Example**:\n    *\n    * ```ts\n    * import * as arrow from \"apache-arrow\";\n    * import { parseRecordBatch } from \"arrow-js-ffi\";\n    *\n    * const wasmTable: FFITable = ...\n    * const wasmMemory: WebAssembly.Memory = wasmMemory();\n    *\n    * const jsBatches: arrow.RecordBatch[] = []\n    * for (let i = 0; i < wasmTable.numBatches(); i++) {\n    *   // Pass `true` to copy arrays across the boundary instead of creating views.\n    *   const jsRecordBatch = parseRecordBatch(\n    *     wasmMemory.buffer,\n    *     wasmTable.arrayAddr(i),\n    *     wasmTable.schemaAddr(),\n    *     true\n    *   );\n    *   jsBatches.push(jsRecordBatch);\n    * }\n    * const jsTable = new arrow.Table(jsBatches);\n    * ```\n    *\n    * @param chunk number The chunk index to use\n    * @returns number pointer to an ArrowArray FFI struct in Wasm memory\n    * @param {number} chunk\n    * @returns {number}\n    */\n    arrayAddr(chunk) {\n        const ret = wasm.ffitable_arrayAddr(this.__wbg_ptr, chunk);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {Uint32Array}\n    */\n    arrayAddrs() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.ffitable_arrayAddrs(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v1 = getArrayU32FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 4, 4);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    */\n    drop() {\n        const ptr = this.__destroy_into_raw();\n        wasm.ffitable_drop(ptr);\n    }\n}\n\nconst FFIVectorFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_ffivector_free(ptr >>> 0));\n/**\n* A chunked Arrow array including associated field metadata\n*/\nexport class FFIVector {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        FFIVectorFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_ffivector_free(ptr);\n    }\n    /**\n    * @returns {number}\n    */\n    schemaAddr() {\n        const ret = wasm.ffivector_schemaAddr(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} i\n    * @returns {number}\n    */\n    arrayAddr(i) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.ffivector_arrayAddr(retptr, this.__wbg_ptr, i);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 >>> 0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst FileMetaDataFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_filemetadata_free(ptr >>> 0));\n/**\n* Metadata for a Parquet file.\n*/\nexport class FileMetaData {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(FileMetaData.prototype);\n        obj.__wbg_ptr = ptr;\n        FileMetaDataFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        FileMetaDataFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_filemetadata_free(ptr);\n    }\n    /**\n    * Returns version of this file.\n    * @returns {number}\n    */\n    version() {\n        const ret = wasm.filemetadata_version(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n    * Returns number of rows in the file.\n    * @returns {number}\n    */\n    numRows() {\n        const ret = wasm.filemetadata_numRows(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n    * String message for application that wrote this file.\n    *\n    * This should have the following format:\n    * `<application> version <application version> (build <application build hash>)`.\n    *\n    * ```shell\n    * parquet-mr version 1.8.0 (build 0fda28af84b9746396014ad6a415b90592a98b3b)\n    * ```\n    * @returns {string | undefined}\n    */\n    createdBy() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.filemetadata_createdBy(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v1;\n            if (r0 !== 0) {\n                v1 = getStringFromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1, 1);\n            }\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Returns key_value_metadata of this file.\n    * @returns {Map<any, any>}\n    */\n    keyValueMetadata() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.filemetadata_keyValueMetadata(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst IntoUnderlyingByteSourceFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_intounderlyingbytesource_free(ptr >>> 0));\n/**\n*/\nexport class IntoUnderlyingByteSource {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        IntoUnderlyingByteSourceFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_intounderlyingbytesource_free(ptr);\n    }\n    /**\n    * @returns {string}\n    */\n    get type() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.intounderlyingbytesource_type(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * @returns {number}\n    */\n    get autoAllocateChunkSize() {\n        const ret = wasm.intounderlyingbytesource_autoAllocateChunkSize(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {ReadableByteStreamController} controller\n    */\n    start(controller) {\n        wasm.intounderlyingbytesource_start(this.__wbg_ptr, addHeapObject(controller));\n    }\n    /**\n    * @param {ReadableByteStreamController} controller\n    * @returns {Promise<any>}\n    */\n    pull(controller) {\n        const ret = wasm.intounderlyingbytesource_pull(this.__wbg_ptr, addHeapObject(controller));\n        return takeObject(ret);\n    }\n    /**\n    */\n    cancel() {\n        const ptr = this.__destroy_into_raw();\n        wasm.intounderlyingbytesource_cancel(ptr);\n    }\n}\n\nconst IntoUnderlyingSinkFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_intounderlyingsink_free(ptr >>> 0));\n/**\n*/\nexport class IntoUnderlyingSink {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        IntoUnderlyingSinkFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_intounderlyingsink_free(ptr);\n    }\n    /**\n    * @param {any} chunk\n    * @returns {Promise<any>}\n    */\n    write(chunk) {\n        const ret = wasm.intounderlyingsink_write(this.__wbg_ptr, addHeapObject(chunk));\n        return takeObject(ret);\n    }\n    /**\n    * @returns {Promise<any>}\n    */\n    close() {\n        const ptr = this.__destroy_into_raw();\n        const ret = wasm.intounderlyingsink_close(ptr);\n        return takeObject(ret);\n    }\n    /**\n    * @param {any} reason\n    * @returns {Promise<any>}\n    */\n    abort(reason) {\n        const ptr = this.__destroy_into_raw();\n        const ret = wasm.intounderlyingsink_abort(ptr, addHeapObject(reason));\n        return takeObject(ret);\n    }\n}\n\nconst IntoUnderlyingSourceFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_intounderlyingsource_free(ptr >>> 0));\n/**\n*/\nexport class IntoUnderlyingSource {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(IntoUnderlyingSource.prototype);\n        obj.__wbg_ptr = ptr;\n        IntoUnderlyingSourceFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        IntoUnderlyingSourceFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_intounderlyingsource_free(ptr);\n    }\n    /**\n    * @param {ReadableStreamDefaultController} controller\n    * @returns {Promise<any>}\n    */\n    pull(controller) {\n        const ret = wasm.intounderlyingsource_pull(this.__wbg_ptr, addHeapObject(controller));\n        return takeObject(ret);\n    }\n    /**\n    */\n    cancel() {\n        const ptr = this.__destroy_into_raw();\n        wasm.intounderlyingsource_cancel(ptr);\n    }\n}\n\nconst ParquetFileFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_parquetfile_free(ptr >>> 0));\n/**\n*/\nexport class ParquetFile {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(ParquetFile.prototype);\n        obj.__wbg_ptr = ptr;\n        ParquetFileFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ParquetFileFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_parquetfile_free(ptr);\n    }\n    /**\n    * Construct a ParquetFile from a new URL.\n    *\n    * @param options The options to pass into `object-store`'s [`parse_url_opts`][parse_url_opts]\n    *\n    * [parse_url_opts]: https://docs.rs/object_store/latest/object_store/fn.parse_url_opts.html\n    * @param {string} url\n    * @param {Map<any, any> | undefined} [options]\n    * @returns {Promise<ParquetFile>}\n    */\n    static fromUrl(url, options) {\n        const ptr0 = passStringToWasm0(url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.parquetfile_fromUrl(ptr0, len0, isLikeNone(options) ? 0 : addHeapObject(options));\n        return takeObject(ret);\n    }\n    /**\n    * Construct a ParquetFile from a new [Blob] or [File] handle.\n    *\n    * [Blob]: https://developer.mozilla.org/en-US/docs/Web/API/Blob\n    * [File]: https://developer.mozilla.org/en-US/docs/Web/API/File\n    *\n    * Safety: Do not use this in a multi-threaded environment,\n    * (transitively depends on `!Send` `web_sys::Blob`)\n    * @param {Blob} handle\n    * @returns {Promise<ParquetFile>}\n    */\n    static fromFile(handle) {\n        const ret = wasm.parquetfile_fromFile(addHeapObject(handle));\n        return takeObject(ret);\n    }\n    /**\n    * @returns {ParquetMetaData}\n    */\n    metadata() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.parquetfile_metadata(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ParquetMetaData.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Read from the Parquet file in an async fashion.\n    *\n    * @param options\n    *\n    *    Options for reading Parquet data. Optional keys include:\n    *\n    *    - `batchSize`: The number of rows in each batch. If not provided, the upstream parquet\n    *           default is 1024.\n    *    - `rowGroups`: Only read data from the provided row group indexes.\n    *    - `limit`: Provide a limit to the number of rows to be read.\n    *    - `offset`: Provide an offset to skip over the given number of rows.\n    *    - `columns`: The column names from the file to read.\n    * @param {ReaderOptions | undefined} [options]\n    * @returns {Promise<Table>}\n    */\n    read(options) {\n        const ret = wasm.parquetfile_read(this.__wbg_ptr, isLikeNone(options) ? 0 : addHeapObject(options));\n        return takeObject(ret);\n    }\n    /**\n    * Create a readable stream of record batches.\n    *\n    * Each item in the stream will be a {@linkcode RecordBatch}.\n    *\n    * @param options\n    *\n    *    Options for reading Parquet data. Optional keys include:\n    *\n    *    - `batchSize`: The number of rows in each batch. If not provided, the upstream parquet\n    *           default is 1024.\n    *    - `rowGroups`: Only read data from the provided row group indexes.\n    *    - `limit`: Provide a limit to the number of rows to be read.\n    *    - `offset`: Provide an offset to skip over the given number of rows.\n    *    - `columns`: The column names from the file to read.\n    *    - `concurrency`: The number of concurrent requests to make\n    * @param {ReaderOptions | undefined} [options]\n    * @returns {Promise<ReadableStream>}\n    */\n    stream(options) {\n        const ret = wasm.parquetfile_stream(this.__wbg_ptr, isLikeNone(options) ? 0 : addHeapObject(options));\n        return takeObject(ret);\n    }\n}\n\nconst ParquetMetaDataFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_parquetmetadata_free(ptr >>> 0));\n/**\n* Global Parquet metadata.\n*/\nexport class ParquetMetaData {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(ParquetMetaData.prototype);\n        obj.__wbg_ptr = ptr;\n        ParquetMetaDataFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ParquetMetaDataFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_parquetmetadata_free(ptr);\n    }\n    /**\n    * Returns file metadata as reference.\n    * @returns {FileMetaData}\n    */\n    fileMetadata() {\n        const ret = wasm.parquetmetadata_fileMetadata(this.__wbg_ptr);\n        return FileMetaData.__wrap(ret);\n    }\n    /**\n    * Returns number of row groups in this file.\n    * @returns {number}\n    */\n    numRowGroups() {\n        const ret = wasm.parquetmetadata_numRowGroups(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n    * Returns row group metadata for `i`th position.\n    * Position should be less than number of row groups `num_row_groups`.\n    * @param {number} i\n    * @returns {RowGroupMetaData}\n    */\n    rowGroup(i) {\n        const ret = wasm.parquetmetadata_rowGroup(this.__wbg_ptr, i);\n        return RowGroupMetaData.__wrap(ret);\n    }\n    /**\n    * Returns row group metadata for all row groups\n    * @returns {(RowGroupMetaData)[]}\n    */\n    rowGroups() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.parquetmetadata_rowGroups(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v1 = getArrayJsValueFromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 4, 4);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst RecordBatchFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_recordbatch_free(ptr >>> 0));\n/**\n* A group of columns of equal length in WebAssembly memory with an associated {@linkcode Schema}.\n*/\nexport class RecordBatch {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RecordBatch.prototype);\n        obj.__wbg_ptr = ptr;\n        RecordBatchFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RecordBatchFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_recordbatch_free(ptr);\n    }\n    /**\n    * The number of rows in this RecordBatch.\n    * @returns {number}\n    */\n    get numRows() {\n        const ret = wasm.recordbatch_numRows(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n    * The number of columns in this RecordBatch.\n    * @returns {number}\n    */\n    get numColumns() {\n        const ret = wasm.recordbatch_numColumns(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n    * The {@linkcode Schema} of this RecordBatch.\n    * @returns {Schema}\n    */\n    get schema() {\n        const ret = wasm.recordbatch_schema(this.__wbg_ptr);\n        return Schema.__wrap(ret);\n    }\n    /**\n    * Export this RecordBatch to FFI structs according to the Arrow C Data Interface.\n    *\n    * This method **does not consume** the RecordBatch, so you must remember to call {@linkcode\n    * RecordBatch.free} to release the resources. The underlying arrays are reference counted, so\n    * this method does not copy data, it only prevents the data from being released.\n    * @returns {FFIRecordBatch}\n    */\n    toFFI() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.recordbatch_toFFI(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return FFIRecordBatch.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Export this RecordBatch to FFI structs according to the Arrow C Data Interface.\n    *\n    * This method **does consume** the RecordBatch, so the original RecordBatch will be\n    * inaccessible after this call. You must still call {@linkcode FFIRecordBatch.free} after\n    * you've finished using the FFIRecordBatch.\n    * @returns {FFIRecordBatch}\n    */\n    intoFFI() {\n        try {\n            const ptr = this.__destroy_into_raw();\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.recordbatch_intoFFI(retptr, ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return FFIRecordBatch.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Consume this RecordBatch and convert to an Arrow IPC Stream buffer\n    * @returns {Uint8Array}\n    */\n    intoIPCStream() {\n        try {\n            const ptr = this.__destroy_into_raw();\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.recordbatch_intoIPCStream(retptr, ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Override the schema of this [`RecordBatch`]\n    *\n    * Returns an error if `schema` is not a superset of the current schema\n    * as determined by [`Schema::contains`]\n    * @param {Schema} schema\n    * @returns {RecordBatch}\n    */\n    withSchema(schema) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(schema, Schema);\n            var ptr0 = schema.__destroy_into_raw();\n            wasm.recordbatch_withSchema(retptr, this.__wbg_ptr, ptr0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return RecordBatch.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Return a new RecordBatch where each column is sliced\n    * according to `offset` and `length`\n    * @param {number} offset\n    * @param {number} length\n    * @returns {RecordBatch}\n    */\n    slice(offset, length) {\n        const ret = wasm.recordbatch_slice(this.__wbg_ptr, offset, length);\n        return RecordBatch.__wrap(ret);\n    }\n    /**\n    * Returns the total number of bytes of memory occupied physically by this batch.\n    * @returns {number}\n    */\n    getArrayMemorySize() {\n        const ret = wasm.recordbatch_getArrayMemorySize(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n}\n\nconst RowGroupMetaDataFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_rowgroupmetadata_free(ptr >>> 0));\n/**\n* Metadata for a Parquet row group.\n*/\nexport class RowGroupMetaData {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RowGroupMetaData.prototype);\n        obj.__wbg_ptr = ptr;\n        RowGroupMetaDataFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RowGroupMetaDataFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_rowgroupmetadata_free(ptr);\n    }\n    /**\n    * Number of columns in this row group.\n    * @returns {number}\n    */\n    numColumns() {\n        const ret = wasm.rowgroupmetadata_numColumns(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n    * Returns column chunk metadata for `i`th column.\n    * @param {number} i\n    * @returns {ColumnChunkMetaData}\n    */\n    column(i) {\n        const ret = wasm.rowgroupmetadata_column(this.__wbg_ptr, i);\n        return ColumnChunkMetaData.__wrap(ret);\n    }\n    /**\n    * Returns column chunk metadata for all columns\n    * @returns {(ColumnChunkMetaData)[]}\n    */\n    columns() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.rowgroupmetadata_columns(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v1 = getArrayJsValueFromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 4, 4);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Number of rows in this row group.\n    * @returns {number}\n    */\n    numRows() {\n        const ret = wasm.rowgroupmetadata_numRows(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n    * Total byte size of all uncompressed column data in this row group.\n    * @returns {number}\n    */\n    totalByteSize() {\n        const ret = wasm.rowgroupmetadata_totalByteSize(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n    * Total size of all compressed column data in this row group.\n    * @returns {number}\n    */\n    compressedSize() {\n        const ret = wasm.rowgroupmetadata_compressedSize(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst SchemaFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_schema_free(ptr >>> 0));\n/**\n* A named collection of types that defines the column names and types in a RecordBatch or Table\n* data structure.\n*\n* A Schema can also contain extra user-defined metadata either at the Table or Column level.\n* Column-level metadata is often used to define [extension\n* types](https://arrow.apache.org/docs/format/Columnar.html#extension-types).\n*/\nexport class Schema {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Schema.prototype);\n        obj.__wbg_ptr = ptr;\n        SchemaFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SchemaFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_schema_free(ptr);\n    }\n    /**\n    * Export this schema to an FFIArrowSchema object, which can be read with arrow-js-ffi.\n    *\n    * This method **does not consume** the Schema, so you must remember to call {@linkcode\n    * Schema.free} to release the resources. The underlying arrays are reference counted, so\n    * this method does not copy data, it only prevents the data from being released.\n    * @returns {FFIArrowSchema}\n    */\n    toFFI() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.schema_toFFI(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return FFIArrowSchema.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Export this Table to FFI structs according to the Arrow C Data Interface.\n    *\n    * This method **does consume** the Table, so the original Table will be\n    * inaccessible after this call. You must still call {@linkcode FFITable.free} after\n    * you've finished using the FFITable.\n    * @returns {FFIArrowSchema}\n    */\n    intoFFI() {\n        try {\n            const ptr = this.__destroy_into_raw();\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.schema_intoFFI(retptr, ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return FFIArrowSchema.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Consume this schema and convert to an Arrow IPC Stream buffer\n    * @returns {Uint8Array}\n    */\n    intoIPCStream() {\n        try {\n            const ptr = this.__destroy_into_raw();\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.schema_intoIPCStream(retptr, ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Sets the metadata of this `Schema` to be `metadata` and returns a new object\n    * @param {SchemaMetadata} metadata\n    * @returns {Schema}\n    */\n    withMetadata(metadata) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.schema_withMetadata(retptr, this.__wbg_ptr, addHeapObject(metadata));\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Schema.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Find the index of the column with the given name.\n    * @param {string} name\n    * @returns {number}\n    */\n    indexOf(name) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.schema_indexOf(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 >>> 0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Returns an immutable reference to the Map of custom metadata key-value pairs.\n    * @returns {SchemaMetadata}\n    */\n    metadata() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.schema_metadata(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst TableFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_table_free(ptr >>> 0));\n/**\n* A Table in WebAssembly memory conforming to the Apache Arrow spec.\n*\n* A Table consists of one or more {@linkcode RecordBatch} objects plus a {@linkcode Schema} that\n* each RecordBatch conforms to.\n*/\nexport class Table {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Table.prototype);\n        obj.__wbg_ptr = ptr;\n        TableFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        TableFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_table_free(ptr);\n    }\n    /**\n    * Access the Table's {@linkcode Schema}.\n    * @returns {Schema}\n    */\n    get schema() {\n        const ret = wasm.table_schema(this.__wbg_ptr);\n        return Schema.__wrap(ret);\n    }\n    /**\n    * The number of batches in the Table\n    * @returns {number}\n    */\n    get numBatches() {\n        const ret = wasm.table_numBatches(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n    * Export this Table to FFI structs according to the Arrow C Data Interface.\n    *\n    * This method **does not consume** the Table, so you must remember to call {@linkcode\n    * Table.free} to release the resources. The underlying arrays are reference counted, so\n    * this method does not copy data, it only prevents the data from being released.\n    * @returns {FFITable}\n    */\n    toFFI() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.table_toFFI(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return FFITable.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Export this Table to FFI structs according to the Arrow C Data Interface.\n    *\n    * This method **does consume** the Table, so the original Table will be\n    * inaccessible after this call. You must still call {@linkcode FFITable.free} after\n    * you've finished using the FFITable.\n    * @returns {FFITable}\n    */\n    intoFFI() {\n        try {\n            const ptr = this.__destroy_into_raw();\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.table_intoFFI(retptr, ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return FFITable.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Consume this table and convert to an Arrow IPC Stream buffer\n    * @returns {Uint8Array}\n    */\n    intoIPCStream() {\n        try {\n            const ptr = this.__destroy_into_raw();\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.table_intoIPCStream(retptr, ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Create a table from an Arrow IPC Stream buffer\n    * @param {Uint8Array} buf\n    * @returns {Table}\n    */\n    static fromIPCStream(buf) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(buf, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.table_fromIPCStream(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Table.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Returns the total number of bytes of memory occupied physically by all batches in this\n    * table.\n    * @returns {number}\n    */\n    getArrayMemorySize() {\n        const ret = wasm.table_getArrayMemorySize(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n}\n\nconst WasmGetOptionsFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_wasmgetoptions_free(ptr >>> 0));\n/**\n*/\nexport class WasmGetOptions {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        WasmGetOptionsFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_wasmgetoptions_free(ptr);\n    }\n}\n\nconst WasmObjectMetaFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_wasmobjectmeta_free(ptr >>> 0));\n/**\n*/\nexport class WasmObjectMeta {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(WasmObjectMeta.prototype);\n        obj.__wbg_ptr = ptr;\n        WasmObjectMetaFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    toJSON() {\n        return {\n            location: this.location,\n            last_modified: this.last_modified,\n            size: this.size,\n            e_tag: this.e_tag,\n            version: this.version,\n        };\n    }\n\n    toString() {\n        return JSON.stringify(this);\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        WasmObjectMetaFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_wasmobjectmeta_free(ptr);\n    }\n    /**\n    * The full path to the object\n    * @returns {string}\n    */\n    get location() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.__wbg_get_wasmobjectmeta_location(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * The full path to the object\n    * @param {string} arg0\n    */\n    set location(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_wasmobjectmeta_location(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n    * The last modified time\n    * @returns {Date}\n    */\n    get last_modified() {\n        const ret = wasm.__wbg_get_wasmobjectmeta_last_modified(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * The last modified time\n    * @param {Date} arg0\n    */\n    set last_modified(arg0) {\n        wasm.__wbg_set_wasmobjectmeta_last_modified(this.__wbg_ptr, addHeapObject(arg0));\n    }\n    /**\n    * The size in bytes of the object\n    * @returns {number}\n    */\n    get size() {\n        const ret = wasm.__wbg_get_wasmobjectmeta_size(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n    * The size in bytes of the object\n    * @param {number} arg0\n    */\n    set size(arg0) {\n        wasm.__wbg_set_wasmobjectmeta_size(this.__wbg_ptr, arg0);\n    }\n    /**\n    * The unique identifier for the object\n    *\n    * <https://datatracker.ietf.org/doc/html/rfc9110#name-etag>\n    * @returns {string | undefined}\n    */\n    get e_tag() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.__wbg_get_wasmobjectmeta_e_tag(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v1;\n            if (r0 !== 0) {\n                v1 = getStringFromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1, 1);\n            }\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * The unique identifier for the object\n    *\n    * <https://datatracker.ietf.org/doc/html/rfc9110#name-etag>\n    * @param {string | undefined} [arg0]\n    */\n    set e_tag(arg0) {\n        var ptr0 = isLikeNone(arg0) ? 0 : passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_wasmobjectmeta_e_tag(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n    * A version indicator for this object\n    * @returns {string | undefined}\n    */\n    get version() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.__wbg_get_wasmobjectmeta_version(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v1;\n            if (r0 !== 0) {\n                v1 = getStringFromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1, 1);\n            }\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * A version indicator for this object\n    * @param {string | undefined} [arg0]\n    */\n    set version(arg0) {\n        var ptr0 = isLikeNone(arg0) ? 0 : passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_wasmobjectmeta_version(this.__wbg_ptr, ptr0, len0);\n    }\n}\n\nconst WasmObjectStoreFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_wasmobjectstore_free(ptr >>> 0));\n/**\n*/\nexport class WasmObjectStore {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        WasmObjectStoreFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_wasmobjectstore_free(ptr);\n    }\n    /**\n    * @param {string} url\n    * @param {object | undefined} [options]\n    */\n    constructor(url, options) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.wasmobjectstore_new(retptr, ptr0, len0, isLikeNone(options) ? 0 : addHeapObject(options));\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            this.__wbg_ptr = r0 >>> 0;\n            return this;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} location\n    * @param {WasmGetOptions | undefined} [options]\n    * @returns {Promise<ReadableStream>}\n    */\n    get(location, options) {\n        const ptr0 = passStringToWasm0(location, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        let ptr1 = 0;\n        if (!isLikeNone(options)) {\n            _assertClass(options, WasmGetOptions);\n            ptr1 = options.__destroy_into_raw();\n        }\n        const ret = wasm.wasmobjectstore_get(this.__wbg_ptr, ptr0, len0, ptr1);\n        return takeObject(ret);\n    }\n    /**\n    * @param {string | undefined} [prefix]\n    * @returns {Promise<ReadableStream>}\n    */\n    list(prefix) {\n        var ptr0 = isLikeNone(prefix) ? 0 : passStringToWasm0(prefix, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        const ret = wasm.wasmobjectstore_list(this.__wbg_ptr, ptr0, len0);\n        return takeObject(ret);\n    }\n}\n\nconst WriterPropertiesFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_writerproperties_free(ptr >>> 0));\n/**\n* Immutable struct to hold writing configuration for `writeParquet`.\n*\n* Use {@linkcode WriterPropertiesBuilder} to create a configuration, then call {@linkcode\n* WriterPropertiesBuilder.build} to create an instance of `WriterProperties`.\n*/\nexport class WriterProperties {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(WriterProperties.prototype);\n        obj.__wbg_ptr = ptr;\n        WriterPropertiesFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        WriterPropertiesFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_writerproperties_free(ptr);\n    }\n}\n\nconst WriterPropertiesBuilderFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_writerpropertiesbuilder_free(ptr >>> 0));\n/**\n* Builder to create a writing configuration for `writeParquet`\n*\n* Call {@linkcode build} on the finished builder to create an immputable {@linkcode WriterProperties} to pass to `writeParquet`\n*/\nexport class WriterPropertiesBuilder {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(WriterPropertiesBuilder.prototype);\n        obj.__wbg_ptr = ptr;\n        WriterPropertiesBuilderFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        WriterPropertiesBuilderFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_writerpropertiesbuilder_free(ptr);\n    }\n    /**\n    * Returns default state of the builder.\n    */\n    constructor() {\n        const ret = wasm.writerpropertiesbuilder_new();\n        this.__wbg_ptr = ret >>> 0;\n        return this;\n    }\n    /**\n    * Finalizes the configuration and returns immutable writer properties struct.\n    * @returns {WriterProperties}\n    */\n    build() {\n        const ptr = this.__destroy_into_raw();\n        const ret = wasm.writerpropertiesbuilder_build(ptr);\n        return WriterProperties.__wrap(ret);\n    }\n    /**\n    * Sets writer version.\n    * @param {WriterVersion} value\n    * @returns {WriterPropertiesBuilder}\n    */\n    setWriterVersion(value) {\n        const ptr = this.__destroy_into_raw();\n        const ret = wasm.writerpropertiesbuilder_setWriterVersion(ptr, value);\n        return WriterPropertiesBuilder.__wrap(ret);\n    }\n    /**\n    * Sets data page size limit.\n    * @param {number} value\n    * @returns {WriterPropertiesBuilder}\n    */\n    setDataPageSizeLimit(value) {\n        const ptr = this.__destroy_into_raw();\n        const ret = wasm.writerpropertiesbuilder_setDataPageSizeLimit(ptr, value);\n        return WriterPropertiesBuilder.__wrap(ret);\n    }\n    /**\n    * Sets dictionary page size limit.\n    * @param {number} value\n    * @returns {WriterPropertiesBuilder}\n    */\n    setDictionaryPageSizeLimit(value) {\n        const ptr = this.__destroy_into_raw();\n        const ret = wasm.writerpropertiesbuilder_setDictionaryPageSizeLimit(ptr, value);\n        return WriterPropertiesBuilder.__wrap(ret);\n    }\n    /**\n    * Sets write batch size.\n    * @param {number} value\n    * @returns {WriterPropertiesBuilder}\n    */\n    setWriteBatchSize(value) {\n        const ptr = this.__destroy_into_raw();\n        const ret = wasm.writerpropertiesbuilder_setWriteBatchSize(ptr, value);\n        return WriterPropertiesBuilder.__wrap(ret);\n    }\n    /**\n    * Sets maximum number of rows in a row group.\n    * @param {number} value\n    * @returns {WriterPropertiesBuilder}\n    */\n    setMaxRowGroupSize(value) {\n        const ptr = this.__destroy_into_raw();\n        const ret = wasm.writerpropertiesbuilder_setMaxRowGroupSize(ptr, value);\n        return WriterPropertiesBuilder.__wrap(ret);\n    }\n    /**\n    * Sets \"created by\" property.\n    * @param {string} value\n    * @returns {WriterPropertiesBuilder}\n    */\n    setCreatedBy(value) {\n        const ptr = this.__destroy_into_raw();\n        const ptr0 = passStringToWasm0(value, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.writerpropertiesbuilder_setCreatedBy(ptr, ptr0, len0);\n        return WriterPropertiesBuilder.__wrap(ret);\n    }\n    /**\n    * Sets \"key_value_metadata\" property.\n    * @param {KeyValueMetadata} value\n    * @returns {WriterPropertiesBuilder}\n    */\n    setKeyValueMetadata(value) {\n        try {\n            const ptr = this.__destroy_into_raw();\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.writerpropertiesbuilder_setKeyValueMetadata(retptr, ptr, addHeapObject(value));\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return WriterPropertiesBuilder.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Sets encoding for any column.\n    *\n    * If dictionary is not enabled, this is treated as a primary encoding for all\n    * columns. In case when dictionary is enabled for any column, this value is\n    * considered to be a fallback encoding for that column.\n    *\n    * Panics if user tries to set dictionary encoding here, regardless of dictionary\n    * encoding flag being set.\n    * @param {Encoding} value\n    * @returns {WriterPropertiesBuilder}\n    */\n    setEncoding(value) {\n        const ptr = this.__destroy_into_raw();\n        const ret = wasm.writerpropertiesbuilder_setEncoding(ptr, value);\n        return WriterPropertiesBuilder.__wrap(ret);\n    }\n    /**\n    * Sets compression codec for any column.\n    * @param {Compression} value\n    * @returns {WriterPropertiesBuilder}\n    */\n    setCompression(value) {\n        const ptr = this.__destroy_into_raw();\n        const ret = wasm.writerpropertiesbuilder_setCompression(ptr, value);\n        return WriterPropertiesBuilder.__wrap(ret);\n    }\n    /**\n    * Sets flag to enable/disable dictionary encoding for any column.\n    *\n    * Use this method to set dictionary encoding, instead of explicitly specifying\n    * encoding in `set_encoding` method.\n    * @param {boolean} value\n    * @returns {WriterPropertiesBuilder}\n    */\n    setDictionaryEnabled(value) {\n        const ptr = this.__destroy_into_raw();\n        const ret = wasm.writerpropertiesbuilder_setDictionaryEnabled(ptr, value);\n        return WriterPropertiesBuilder.__wrap(ret);\n    }\n    /**\n    * Sets flag to enable/disable statistics for any column.\n    * @param {EnabledStatistics} value\n    * @returns {WriterPropertiesBuilder}\n    */\n    setStatisticsEnabled(value) {\n        const ptr = this.__destroy_into_raw();\n        const ret = wasm.writerpropertiesbuilder_setStatisticsEnabled(ptr, value);\n        return WriterPropertiesBuilder.__wrap(ret);\n    }\n    /**\n    * Sets max statistics size for any column.\n    * Applicable only if statistics are enabled.\n    * @param {number} value\n    * @returns {WriterPropertiesBuilder}\n    */\n    setMaxStatisticsSize(value) {\n        const ptr = this.__destroy_into_raw();\n        const ret = wasm.writerpropertiesbuilder_setMaxStatisticsSize(ptr, value);\n        return WriterPropertiesBuilder.__wrap(ret);\n    }\n    /**\n    * Sets encoding for a column.\n    * Takes precedence over globally defined settings.\n    *\n    * If dictionary is not enabled, this is treated as a primary encoding for this\n    * column. In case when dictionary is enabled for this column, either through\n    * global defaults or explicitly, this value is considered to be a fallback\n    * encoding for this column.\n    *\n    * Panics if user tries to set dictionary encoding here, regardless of dictionary\n    * encoding flag being set.\n    * @param {string} col\n    * @param {Encoding} value\n    * @returns {WriterPropertiesBuilder}\n    */\n    setColumnEncoding(col, value) {\n        const ptr = this.__destroy_into_raw();\n        const ptr0 = passStringToWasm0(col, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.writerpropertiesbuilder_setColumnEncoding(ptr, ptr0, len0, value);\n        return WriterPropertiesBuilder.__wrap(ret);\n    }\n    /**\n    * Sets compression codec for a column.\n    * Takes precedence over globally defined settings.\n    * @param {string} col\n    * @param {Compression} value\n    * @returns {WriterPropertiesBuilder}\n    */\n    setColumnCompression(col, value) {\n        const ptr = this.__destroy_into_raw();\n        const ptr0 = passStringToWasm0(col, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.writerpropertiesbuilder_setColumnCompression(ptr, ptr0, len0, value);\n        return WriterPropertiesBuilder.__wrap(ret);\n    }\n    /**\n    * Sets flag to enable/disable dictionary encoding for a column.\n    * Takes precedence over globally defined settings.\n    * @param {string} col\n    * @param {boolean} value\n    * @returns {WriterPropertiesBuilder}\n    */\n    setColumnDictionaryEnabled(col, value) {\n        const ptr = this.__destroy_into_raw();\n        const ptr0 = passStringToWasm0(col, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.writerpropertiesbuilder_setColumnDictionaryEnabled(ptr, ptr0, len0, value);\n        return WriterPropertiesBuilder.__wrap(ret);\n    }\n    /**\n    * Sets flag to enable/disable statistics for a column.\n    * Takes precedence over globally defined settings.\n    * @param {string} col\n    * @param {EnabledStatistics} value\n    * @returns {WriterPropertiesBuilder}\n    */\n    setColumnStatisticsEnabled(col, value) {\n        const ptr = this.__destroy_into_raw();\n        const ptr0 = passStringToWasm0(col, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.writerpropertiesbuilder_setColumnStatisticsEnabled(ptr, ptr0, len0, value);\n        return WriterPropertiesBuilder.__wrap(ret);\n    }\n    /**\n    * Sets max size for statistics for a column.\n    * Takes precedence over globally defined settings.\n    * @param {string} col\n    * @param {number} value\n    * @returns {WriterPropertiesBuilder}\n    */\n    setColumnMaxStatisticsSize(col, value) {\n        const ptr = this.__destroy_into_raw();\n        const ptr0 = passStringToWasm0(col, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.writerpropertiesbuilder_setColumnMaxStatisticsSize(ptr, ptr0, len0, value);\n        return WriterPropertiesBuilder.__wrap(ret);\n    }\n}\n\nasync function __wbg_load(module, imports) {\n    if (typeof Response === 'function' && module instanceof Response) {\n        if (typeof WebAssembly.instantiateStreaming === 'function') {\n            try {\n                return await WebAssembly.instantiateStreaming(module, imports);\n\n            } catch (e) {\n                if (module.headers.get('Content-Type') != 'application/wasm') {\n                    console.warn(\"`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\\n\", e);\n\n                } else {\n                    throw e;\n                }\n            }\n        }\n\n        const bytes = await module.arrayBuffer();\n        return await WebAssembly.instantiate(bytes, imports);\n\n    } else {\n        const instance = await WebAssembly.instantiate(module, imports);\n\n        if (instance instanceof WebAssembly.Instance) {\n            return { instance, module };\n\n        } else {\n            return instance;\n        }\n    }\n}\n\nfunction __wbg_get_imports() {\n    const imports = {};\n    imports.wbg = {};\n    imports.wbg.__wbindgen_number_new = function(arg0) {\n        const ret = arg0;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_columnchunkmetadata_new = function(arg0) {\n        const ret = ColumnChunkMetaData.__wrap(arg0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_rowgroupmetadata_new = function(arg0) {\n        const ret = RowGroupMetaData.__wrap(arg0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_parquetfile_new = function(arg0) {\n        const ret = ParquetFile.__wrap(arg0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_object_drop_ref = function(arg0) {\n        takeObject(arg0);\n    };\n    imports.wbg.__wbindgen_object_clone_ref = function(arg0) {\n        const ret = getObject(arg0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_error_new = function(arg0, arg1) {\n        const ret = new Error(getStringFromWasm0(arg0, arg1));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_is_undefined = function(arg0) {\n        const ret = getObject(arg0) === undefined;\n        return ret;\n    };\n    imports.wbg.__wbindgen_in = function(arg0, arg1) {\n        const ret = getObject(arg0) in getObject(arg1);\n        return ret;\n    };\n    imports.wbg.__wbindgen_is_bigint = function(arg0) {\n        const ret = typeof(getObject(arg0)) === 'bigint';\n        return ret;\n    };\n    imports.wbg.__wbindgen_bigint_from_u64 = function(arg0) {\n        const ret = BigInt.asUintN(64, arg0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_jsval_eq = function(arg0, arg1) {\n        const ret = getObject(arg0) === getObject(arg1);\n        return ret;\n    };\n    imports.wbg.__wbindgen_is_object = function(arg0) {\n        const val = getObject(arg0);\n        const ret = typeof(val) === 'object' && val !== null;\n        return ret;\n    };\n    imports.wbg.__wbindgen_string_new = function(arg0, arg1) {\n        const ret = getStringFromWasm0(arg0, arg1);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_number_get = function(arg0, arg1) {\n        const obj = getObject(arg1);\n        const ret = typeof(obj) === 'number' ? obj : undefined;\n        getFloat64Memory0()[arg0 / 8 + 1] = isLikeNone(ret) ? 0 : ret;\n        getInt32Memory0()[arg0 / 4 + 0] = !isLikeNone(ret);\n    };\n    imports.wbg.__wbg_fetch_1db5b0ae726d68b5 = function(arg0) {\n        const ret = fetch(getObject(arg0));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_wasmobjectmeta_new = function(arg0) {\n        const ret = WasmObjectMeta.__wrap(arg0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_string_get = function(arg0, arg1) {\n        const obj = getObject(arg1);\n        const ret = typeof(obj) === 'string' ? obj : undefined;\n        var ptr1 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len1 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len1;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr1;\n    };\n    imports.wbg.__wbg_fetch_bc7c8e27076a5c84 = function(arg0) {\n        const ret = fetch(getObject(arg0));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_done_2ffa852272310e47 = function(arg0) {\n        const ret = getObject(arg0).done;\n        return ret;\n    };\n    imports.wbg.__wbg_value_9f6eeb1e2aab8d96 = function(arg0) {\n        const ret = getObject(arg0).value;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_newwithintounderlyingsource_a03a82aa1bbbb292 = function(arg0, arg1) {\n        const ret = new ReadableStream(IntoUnderlyingSource.__wrap(arg0), takeObject(arg1));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_getReader_ab94afcb5cb7689a = function() { return handleError(function (arg0) {\n        const ret = getObject(arg0).getReader();\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_sethighWaterMark_ea50ed3ec2143088 = function(arg0, arg1) {\n        getObject(arg0).highWaterMark = arg1;\n    };\n    imports.wbg.__wbg_recordbatch_new = function(arg0) {\n        const ret = RecordBatch.__wrap(arg0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_table_new = function(arg0) {\n        const ret = Table.__wrap(arg0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_jsval_loose_eq = function(arg0, arg1) {\n        const ret = getObject(arg0) == getObject(arg1);\n        return ret;\n    };\n    imports.wbg.__wbindgen_boolean_get = function(arg0) {\n        const v = getObject(arg0);\n        const ret = typeof(v) === 'boolean' ? (v ? 1 : 0) : 2;\n        return ret;\n    };\n    imports.wbg.__wbindgen_as_number = function(arg0) {\n        const ret = +getObject(arg0);\n        return ret;\n    };\n    imports.wbg.__wbg_String_b9412f8799faab3e = function(arg0, arg1) {\n        const ret = String(getObject(arg1));\n        const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len1;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr1;\n    };\n    imports.wbg.__wbg_getwithrefkey_edc2c8960f0f1191 = function(arg0, arg1) {\n        const ret = getObject(arg0)[getObject(arg1)];\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_set_f975102236d3c502 = function(arg0, arg1, arg2) {\n        getObject(arg0)[takeObject(arg1)] = takeObject(arg2);\n    };\n    imports.wbg.__wbindgen_cb_drop = function(arg0) {\n        const obj = takeObject(arg0).original;\n        if (obj.cnt-- == 1) {\n            obj.a = 0;\n            return true;\n        }\n        const ret = false;\n        return ret;\n    };\n    imports.wbg.__wbg_queueMicrotask_481971b0d87f3dd4 = function(arg0) {\n        queueMicrotask(getObject(arg0));\n    };\n    imports.wbg.__wbg_queueMicrotask_3cbae2ec6b6cd3d6 = function(arg0) {\n        const ret = getObject(arg0).queueMicrotask;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_is_function = function(arg0) {\n        const ret = typeof(getObject(arg0)) === 'function';\n        return ret;\n    };\n    imports.wbg.__wbg_fetch_921fad6ef9e883dd = function(arg0, arg1) {\n        const ret = getObject(arg0).fetch(getObject(arg1));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_new_ab6fd82b10560829 = function() { return handleError(function () {\n        const ret = new Headers();\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_append_7bfcb4937d1d5e29 = function() { return handleError(function (arg0, arg1, arg2, arg3, arg4) {\n        getObject(arg0).append(getStringFromWasm0(arg1, arg2), getStringFromWasm0(arg3, arg4));\n    }, arguments) };\n    imports.wbg.__wbg_close_a994f9425dab445c = function() { return handleError(function (arg0) {\n        getObject(arg0).close();\n    }, arguments) };\n    imports.wbg.__wbg_enqueue_ea194723156c0cc2 = function() { return handleError(function (arg0, arg1) {\n        getObject(arg0).enqueue(getObject(arg1));\n    }, arguments) };\n    imports.wbg.__wbg_size_9c7e57fbd4f0f4b5 = function(arg0) {\n        const ret = getObject(arg0).size;\n        return ret;\n    };\n    imports.wbg.__wbg_arrayBuffer_307ddd1bd1d04e23 = function(arg0) {\n        const ret = getObject(arg0).arrayBuffer();\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_slice_1991e6e71a6587f3 = function() { return handleError(function (arg0, arg1, arg2) {\n        const ret = getObject(arg0).slice(arg1, arg2);\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_read_e7d0f8a49be01d86 = function(arg0) {\n        const ret = getObject(arg0).read();\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_releaseLock_5c49db976c08b864 = function(arg0) {\n        getObject(arg0).releaseLock();\n    };\n    imports.wbg.__wbg_cancel_6ee33d4006737aef = function(arg0) {\n        const ret = getObject(arg0).cancel();\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_byobRequest_72fca99f9c32c193 = function(arg0) {\n        const ret = getObject(arg0).byobRequest;\n        return isLikeNone(ret) ? 0 : addHeapObject(ret);\n    };\n    imports.wbg.__wbg_close_184931724d961ccc = function() { return handleError(function (arg0) {\n        getObject(arg0).close();\n    }, arguments) };\n    imports.wbg.__wbg_instanceof_Response_849eb93e75734b6e = function(arg0) {\n        let result;\n        try {\n            result = getObject(arg0) instanceof Response;\n        } catch (_) {\n            result = false;\n        }\n        const ret = result;\n        return ret;\n    };\n    imports.wbg.__wbg_url_5f6dc4009ac5f99d = function(arg0, arg1) {\n        const ret = getObject(arg1).url;\n        const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len1;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr1;\n    };\n    imports.wbg.__wbg_status_61a01141acd3cf74 = function(arg0) {\n        const ret = getObject(arg0).status;\n        return ret;\n    };\n    imports.wbg.__wbg_headers_9620bfada380764a = function(arg0) {\n        const ret = getObject(arg0).headers;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_body_9545a94f397829db = function(arg0) {\n        const ret = getObject(arg0).body;\n        return isLikeNone(ret) ? 0 : addHeapObject(ret);\n    };\n    imports.wbg.__wbg_arrayBuffer_29931d52c7206b02 = function() { return handleError(function (arg0) {\n        const ret = getObject(arg0).arrayBuffer();\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_signal_a61f78a3478fd9bc = function(arg0) {\n        const ret = getObject(arg0).signal;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_new_0d76b0581eca6298 = function() { return handleError(function () {\n        const ret = new AbortController();\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_abort_2aa7521d5690750e = function(arg0) {\n        getObject(arg0).abort();\n    };\n    imports.wbg.__wbg_view_7f0ce470793a340f = function(arg0) {\n        const ret = getObject(arg0).view;\n        return isLikeNone(ret) ? 0 : addHeapObject(ret);\n    };\n    imports.wbg.__wbg_respond_b1a43b2e3a06d525 = function() { return handleError(function (arg0, arg1) {\n        getObject(arg0).respond(arg1 >>> 0);\n    }, arguments) };\n    imports.wbg.__wbg_newwithstrandinit_3fd6fba4083ff2d0 = function() { return handleError(function (arg0, arg1, arg2) {\n        const ret = new Request(getStringFromWasm0(arg0, arg1), getObject(arg2));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_get_bd8e338fbd5f5cc8 = function(arg0, arg1) {\n        const ret = getObject(arg0)[arg1 >>> 0];\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_length_cd7af8117672b8b8 = function(arg0) {\n        const ret = getObject(arg0).length;\n        return ret;\n    };\n    imports.wbg.__wbg_newnoargs_e258087cd0daa0ea = function(arg0, arg1) {\n        const ret = new Function(getStringFromWasm0(arg0, arg1));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_new_d9bc3a0147634640 = function() {\n        const ret = new Map();\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_next_40fc327bfc8770e6 = function(arg0) {\n        const ret = getObject(arg0).next;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_next_196c84450b364254 = function() { return handleError(function (arg0) {\n        const ret = getObject(arg0).next();\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_done_298b57d23c0fc80c = function(arg0) {\n        const ret = getObject(arg0).done;\n        return ret;\n    };\n    imports.wbg.__wbg_value_d93c65011f51a456 = function(arg0) {\n        const ret = getObject(arg0).value;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_iterator_2cee6dadfd956dfa = function() {\n        const ret = Symbol.iterator;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_get_e3c254076557e348 = function() { return handleError(function (arg0, arg1) {\n        const ret = Reflect.get(getObject(arg0), getObject(arg1));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_call_27c0f87801dedf93 = function() { return handleError(function (arg0, arg1) {\n        const ret = getObject(arg0).call(getObject(arg1));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_new_72fb9a18b5ae2624 = function() {\n        const ret = new Object();\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_is_string = function(arg0) {\n        const ret = typeof(getObject(arg0)) === 'string';\n        return ret;\n    };\n    imports.wbg.__wbg_self_ce0dbfc45cf2f5be = function() { return handleError(function () {\n        const ret = self.self;\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_window_c6fb939a7f436783 = function() { return handleError(function () {\n        const ret = window.window;\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_globalThis_d1e6af4856ba331b = function() { return handleError(function () {\n        const ret = globalThis.globalThis;\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_global_207b558942527489 = function() { return handleError(function () {\n        const ret = global.global;\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_isArray_2ab64d95e09ea0ae = function(arg0) {\n        const ret = Array.isArray(getObject(arg0));\n        return ret;\n    };\n    imports.wbg.__wbg_instanceof_ArrayBuffer_836825be07d4c9d2 = function(arg0) {\n        let result;\n        try {\n            result = getObject(arg0) instanceof ArrayBuffer;\n        } catch (_) {\n            result = false;\n        }\n        const ret = result;\n        return ret;\n    };\n    imports.wbg.__wbg_new_28c511d9baebfa89 = function(arg0, arg1) {\n        const ret = new Error(getStringFromWasm0(arg0, arg1));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_call_b3ca7c6051f9bec1 = function() { return handleError(function (arg0, arg1, arg2) {\n        const ret = getObject(arg0).call(getObject(arg1), getObject(arg2));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_set_8417257aaedc936b = function(arg0, arg1, arg2) {\n        const ret = getObject(arg0).set(getObject(arg1), getObject(arg2));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_isSafeInteger_f7b04ef02296c4d2 = function(arg0) {\n        const ret = Number.isSafeInteger(getObject(arg0));\n        return ret;\n    };\n    imports.wbg.__wbg_new_cf3ec55744a78578 = function(arg0) {\n        const ret = new Date(getObject(arg0));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_entries_95cc2c823b285a09 = function(arg0) {\n        const ret = Object.entries(getObject(arg0));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_new_81740750da40724f = function(arg0, arg1) {\n        try {\n            var state0 = {a: arg0, b: arg1};\n            var cb0 = (arg0, arg1) => {\n                const a = state0.a;\n                state0.a = 0;\n                try {\n                    return __wbg_adapter_285(a, state0.b, arg0, arg1);\n                } finally {\n                    state0.a = a;\n                }\n            };\n            const ret = new Promise(cb0);\n            return addHeapObject(ret);\n        } finally {\n            state0.a = state0.b = 0;\n        }\n    };\n    imports.wbg.__wbg_resolve_b0083a7967828ec8 = function(arg0) {\n        const ret = Promise.resolve(getObject(arg0));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_catch_0260e338d10f79ae = function(arg0, arg1) {\n        const ret = getObject(arg0).catch(getObject(arg1));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_then_0c86a60e8fcfe9f6 = function(arg0, arg1) {\n        const ret = getObject(arg0).then(getObject(arg1));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_then_a73caa9a87991566 = function(arg0, arg1, arg2) {\n        const ret = getObject(arg0).then(getObject(arg1), getObject(arg2));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_buffer_12d079cc21e14bdb = function(arg0) {\n        const ret = getObject(arg0).buffer;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_newwithbyteoffsetandlength_aa4a17c33a06e5cb = function(arg0, arg1, arg2) {\n        const ret = new Uint8Array(getObject(arg0), arg1 >>> 0, arg2 >>> 0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_new_63b92bc8671ed464 = function(arg0) {\n        const ret = new Uint8Array(getObject(arg0));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_set_a47bac70306a19a7 = function(arg0, arg1, arg2) {\n        getObject(arg0).set(getObject(arg1), arg2 >>> 0);\n    };\n    imports.wbg.__wbg_length_c20a40f15020d68a = function(arg0) {\n        const ret = getObject(arg0).length;\n        return ret;\n    };\n    imports.wbg.__wbg_instanceof_Uint8Array_2b3bbecd033d19f6 = function(arg0) {\n        let result;\n        try {\n            result = getObject(arg0) instanceof Uint8Array;\n        } catch (_) {\n            result = false;\n        }\n        const ret = result;\n        return ret;\n    };\n    imports.wbg.__wbg_newwithlength_e9b4878cebadb3d3 = function(arg0) {\n        const ret = new Uint8Array(arg0 >>> 0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_newwithbyteoffset_27c6424791adc775 = function(arg0, arg1) {\n        const ret = new Uint8Array(getObject(arg0), arg1 >>> 0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_buffer_dd7f74bc60f1faab = function(arg0) {\n        const ret = getObject(arg0).buffer;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_byteLength_58f7b4fab1919d44 = function(arg0) {\n        const ret = getObject(arg0).byteLength;\n        return ret;\n    };\n    imports.wbg.__wbg_byteOffset_81d60f7392524f62 = function(arg0) {\n        const ret = getObject(arg0).byteOffset;\n        return ret;\n    };\n    imports.wbg.__wbg_stringify_8887fe74e1c50d81 = function() { return handleError(function (arg0) {\n        const ret = JSON.stringify(getObject(arg0));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_has_0af94d20077affa2 = function() { return handleError(function (arg0, arg1) {\n        const ret = Reflect.has(getObject(arg0), getObject(arg1));\n        return ret;\n    }, arguments) };\n    imports.wbg.__wbg_set_1f9b04f170055d33 = function() { return handleError(function (arg0, arg1, arg2) {\n        const ret = Reflect.set(getObject(arg0), getObject(arg1), getObject(arg2));\n        return ret;\n    }, arguments) };\n    imports.wbg.__wbindgen_bigint_get_as_i64 = function(arg0, arg1) {\n        const v = getObject(arg1);\n        const ret = typeof(v) === 'bigint' ? v : undefined;\n        getBigInt64Memory0()[arg0 / 8 + 1] = isLikeNone(ret) ? BigInt(0) : ret;\n        getInt32Memory0()[arg0 / 4 + 0] = !isLikeNone(ret);\n    };\n    imports.wbg.__wbindgen_debug_string = function(arg0, arg1) {\n        const ret = debugString(getObject(arg1));\n        const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len1;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr1;\n    };\n    imports.wbg.__wbindgen_throw = function(arg0, arg1) {\n        throw new Error(getStringFromWasm0(arg0, arg1));\n    };\n    imports.wbg.__wbindgen_memory = function() {\n        const ret = wasm.memory;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_function_table = function() {\n        const ret = wasm.__wbindgen_export_2;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_closure_wrapper13295 = function(arg0, arg1, arg2) {\n        const ret = makeMutClosure(arg0, arg1, 3248, __wbg_adapter_50);\n        return addHeapObject(ret);\n    };\n\n    return imports;\n}\n\nfunction __wbg_init_memory(imports, maybe_memory) {\n\n}\n\nfunction __wbg_finalize_init(instance, module) {\n    wasm = instance.exports;\n    __wbg_init.__wbindgen_wasm_module = module;\n    cachedBigInt64Memory0 = null;\n    cachedFloat64Memory0 = null;\n    cachedInt32Memory0 = null;\n    cachedUint32Memory0 = null;\n    cachedUint8Memory0 = null;\n\n\n    return wasm;\n}\n\nfunction initSync(module) {\n    if (wasm !== undefined) return wasm;\n\n    const imports = __wbg_get_imports();\n\n    __wbg_init_memory(imports);\n\n    if (!(module instanceof WebAssembly.Module)) {\n        module = new WebAssembly.Module(module);\n    }\n\n    const instance = new WebAssembly.Instance(module, imports);\n\n    return __wbg_finalize_init(instance, module);\n}\n\nasync function __wbg_init(input) {\n    if (wasm !== undefined) return wasm;\n\n    if (typeof input === 'undefined') {\n        input = new URL('parquet_wasm_bg.wasm', import.meta.url);\n    }\n    const imports = __wbg_get_imports();\n\n    if (typeof input === 'string' || (typeof Request === 'function' && input instanceof Request) || (typeof URL === 'function' && input instanceof URL)) {\n        input = fetch(input);\n    }\n\n    __wbg_init_memory(imports);\n\n    const { instance, module } = await __wbg_load(await input, imports);\n\n    return __wbg_finalize_init(instance, module);\n}\n\nexport { initSync }\nexport default __wbg_init;\n"],
  "mappings": "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",
  "names": ["ptr", "arg0", "arg1"]
}
