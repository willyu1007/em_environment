/* tslint:disable */
/* eslint-disable */
export const memory: WebAssembly.Memory;
export function readParquet(a: number, b: number, c: number, d: number): void;
export function readSchema(a: number, b: number, c: number): void;
export function writeParquet(a: number, b: number, c: number): void;
export function readParquetStream(a: number, b: number, c: number, d: number): number;
export function __wbg_parquetfile_free(a: number): void;
export function parquetfile_fromUrl(a: number, b: number, c: number): number;
export function parquetfile_fromFile(a: number): number;
export function parquetfile_metadata(a: number, b: number): void;
export function parquetfile_read(a: number, b: number): number;
export function parquetfile_stream(a: number, b: number): number;
export function __wbg_parquetmetadata_free(a: number): void;
export function parquetmetadata_fileMetadata(a: number): number;
export function parquetmetadata_numRowGroups(a: number): number;
export function parquetmetadata_rowGroup(a: number, b: number): number;
export function parquetmetadata_rowGroups(a: number, b: number): void;
export function __wbg_filemetadata_free(a: number): void;
export function filemetadata_version(a: number): number;
export function filemetadata_numRows(a: number): number;
export function filemetadata_createdBy(a: number, b: number): void;
export function filemetadata_keyValueMetadata(a: number, b: number): void;
export function __wbg_rowgroupmetadata_free(a: number): void;
export function rowgroupmetadata_numColumns(a: number): number;
export function rowgroupmetadata_column(a: number, b: number): number;
export function rowgroupmetadata_columns(a: number, b: number): void;
export function rowgroupmetadata_numRows(a: number): number;
export function rowgroupmetadata_totalByteSize(a: number): number;
export function rowgroupmetadata_compressedSize(a: number): number;
export function __wbg_columnchunkmetadata_free(a: number): void;
export function columnchunkmetadata_filePath(a: number, b: number): void;
export function columnchunkmetadata_fileOffset(a: number): number;
export function columnchunkmetadata_columnPath(a: number, b: number): void;
export function columnchunkmetadata_encodings(a: number, b: number): void;
export function columnchunkmetadata_numValues(a: number): number;
export function columnchunkmetadata_compression(a: number): number;
export function columnchunkmetadata_compressedSize(a: number): number;
export function columnchunkmetadata_uncompressedSize(a: number): number;
export function __wbg_writerproperties_free(a: number): void;
export function __wbg_writerpropertiesbuilder_free(a: number): void;
export function writerpropertiesbuilder_new(): number;
export function writerpropertiesbuilder_build(a: number): number;
export function writerpropertiesbuilder_setWriterVersion(a: number, b: number): number;
export function writerpropertiesbuilder_setDataPageSizeLimit(a: number, b: number): number;
export function writerpropertiesbuilder_setDictionaryPageSizeLimit(a: number, b: number): number;
export function writerpropertiesbuilder_setWriteBatchSize(a: number, b: number): number;
export function writerpropertiesbuilder_setMaxRowGroupSize(a: number, b: number): number;
export function writerpropertiesbuilder_setCreatedBy(a: number, b: number, c: number): number;
export function writerpropertiesbuilder_setKeyValueMetadata(a: number, b: number, c: number): void;
export function writerpropertiesbuilder_setEncoding(a: number, b: number): number;
export function writerpropertiesbuilder_setCompression(a: number, b: number): number;
export function writerpropertiesbuilder_setDictionaryEnabled(a: number, b: number): number;
export function writerpropertiesbuilder_setStatisticsEnabled(a: number, b: number): number;
export function writerpropertiesbuilder_setMaxStatisticsSize(a: number, b: number): number;
export function writerpropertiesbuilder_setColumnEncoding(a: number, b: number, c: number, d: number): number;
export function writerpropertiesbuilder_setColumnCompression(a: number, b: number, c: number, d: number): number;
export function writerpropertiesbuilder_setColumnDictionaryEnabled(a: number, b: number, c: number, d: number): number;
export function writerpropertiesbuilder_setColumnStatisticsEnabled(a: number, b: number, c: number, d: number): number;
export function writerpropertiesbuilder_setColumnMaxStatisticsSize(a: number, b: number, c: number, d: number): number;
export function __wbg_wasmgetoptions_free(a: number): void;
export function __wbg_wasmobjectmeta_free(a: number): void;
export function __wbg_get_wasmobjectmeta_location(a: number, b: number): void;
export function __wbg_set_wasmobjectmeta_location(a: number, b: number, c: number): void;
export function __wbg_get_wasmobjectmeta_last_modified(a: number): number;
export function __wbg_set_wasmobjectmeta_last_modified(a: number, b: number): void;
export function __wbg_get_wasmobjectmeta_size(a: number): number;
export function __wbg_set_wasmobjectmeta_size(a: number, b: number): void;
export function __wbg_get_wasmobjectmeta_e_tag(a: number, b: number): void;
export function __wbg_set_wasmobjectmeta_e_tag(a: number, b: number, c: number): void;
export function __wbg_get_wasmobjectmeta_version(a: number, b: number): void;
export function __wbg_set_wasmobjectmeta_version(a: number, b: number, c: number): void;
export function __wbg_wasmobjectstore_free(a: number): void;
export function wasmobjectstore_new(a: number, b: number, c: number, d: number): void;
export function wasmobjectstore_get(a: number, b: number, c: number, d: number): number;
export function wasmobjectstore_list(a: number, b: number, c: number): number;
export function __wbg_intounderlyingbytesource_free(a: number): void;
export function intounderlyingbytesource_type(a: number, b: number): void;
export function intounderlyingbytesource_autoAllocateChunkSize(a: number): number;
export function intounderlyingbytesource_start(a: number, b: number): void;
export function intounderlyingbytesource_pull(a: number, b: number): number;
export function intounderlyingbytesource_cancel(a: number): void;
export function __wbg_intounderlyingsource_free(a: number): void;
export function intounderlyingsource_pull(a: number, b: number): number;
export function intounderlyingsource_cancel(a: number): void;
export function __wbg_intounderlyingsink_free(a: number): void;
export function intounderlyingsink_write(a: number, b: number): number;
export function intounderlyingsink_close(a: number): number;
export function intounderlyingsink_abort(a: number, b: number): number;
export function __wbg_schema_free(a: number): void;
export function schema_toFFI(a: number, b: number): void;
export function schema_intoFFI(a: number, b: number): void;
export function schema_intoIPCStream(a: number, b: number): void;
export function schema_withMetadata(a: number, b: number, c: number): void;
export function schema_indexOf(a: number, b: number, c: number, d: number): void;
export function schema_metadata(a: number, b: number): void;
export function __wbg_ffidata_free(a: number): void;
export function ffidata_schema_addr(a: number): number;
export function __wbg_ffiarrowschema_free(a: number): void;
export function ffiarrowschema_addr(a: number): number;
export function ffidata_arrayAddr(a: number): number;
export function __wbg_ffiarrowarray_free(a: number): void;
export function ffiarrowarray_addr(a: number): number;
export function __wbg_ffivector_free(a: number): void;
export function ffivector_schemaAddr(a: number): number;
export function ffivector_arrayAddr(a: number, b: number, c: number): void;
export function __wbg_table_free(a: number): void;
export function table_schema(a: number): number;
export function table_numBatches(a: number): number;
export function table_toFFI(a: number, b: number): void;
export function table_intoFFI(a: number, b: number): void;
export function table_intoIPCStream(a: number, b: number): void;
export function table_fromIPCStream(a: number, b: number, c: number): void;
export function table_getArrayMemorySize(a: number): number;
export function __wbg_ffirecordbatch_free(a: number): void;
export function ffirecordbatch_arrayAddr(a: number): number;
export function ffirecordbatch_schemaAddr(a: number): number;
export function __wbg_recordbatch_free(a: number): void;
export function recordbatch_numRows(a: number): number;
export function recordbatch_numColumns(a: number): number;
export function recordbatch_schema(a: number): number;
export function recordbatch_toFFI(a: number, b: number): void;
export function recordbatch_intoFFI(a: number, b: number): void;
export function recordbatch_intoIPCStream(a: number, b: number): void;
export function recordbatch_withSchema(a: number, b: number, c: number): void;
export function recordbatch_slice(a: number, b: number, c: number): number;
export function recordbatch_getArrayMemorySize(a: number): number;
export function __wbg_ffitable_free(a: number): void;
export function ffitable_numBatches(a: number): number;
export function ffitable_schemaAddr(a: number): number;
export function ffitable_arrayAddr(a: number, b: number): number;
export function ffitable_arrayAddrs(a: number, b: number): void;
export function ffitable_drop(a: number): void;
export function wasmMemory(): number;
export function _functionTable(): number;
export function rust_zstd_wasm_shim_qsort(a: number, b: number, c: number, d: number): void;
export function rust_zstd_wasm_shim_malloc(a: number): number;
export function rust_zstd_wasm_shim_memcmp(a: number, b: number, c: number): number;
export function rust_zstd_wasm_shim_calloc(a: number, b: number): number;
export function rust_zstd_wasm_shim_free(a: number): void;
export function rust_zstd_wasm_shim_memcpy(a: number, b: number, c: number): number;
export function rust_zstd_wasm_shim_memmove(a: number, b: number, c: number): number;
export function rust_zstd_wasm_shim_memset(a: number, b: number, c: number): number;
export function BrotliDecoderCreateInstance(a: number, b: number, c: number): number;
export function BrotliDecoderSetParameter(a: number, b: number, c: number): void;
export function BrotliDecoderDecompressPrealloc(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number, k: number): void;
export function BrotliDecoderDecompressWithReturnInfo(a: number, b: number, c: number, d: number, e: number): void;
export function BrotliDecoderDecompress(a: number, b: number, c: number, d: number): number;
export function BrotliDecoderDecompressStream(a: number, b: number, c: number, d: number, e: number, f: number): number;
export function BrotliDecoderDecompressStreaming(a: number, b: number, c: number, d: number, e: number): number;
export function BrotliDecoderMallocU8(a: number, b: number): number;
export function BrotliDecoderFreeU8(a: number, b: number, c: number): void;
export function BrotliDecoderMallocUsize(a: number, b: number): number;
export function BrotliDecoderFreeUsize(a: number, b: number, c: number): void;
export function BrotliDecoderDestroyInstance(a: number): void;
export function BrotliDecoderHasMoreOutput(a: number): number;
export function BrotliDecoderTakeOutput(a: number, b: number): number;
export function BrotliDecoderIsUsed(a: number): number;
export function BrotliDecoderIsFinished(a: number): number;
export function BrotliDecoderGetErrorCode(a: number): number;
export function BrotliDecoderGetErrorString(a: number): number;
export function BrotliDecoderErrorString(a: number): number;
export function BrotliDecoderVersion(): number;
export function __wbindgen_malloc(a: number, b: number): number;
export function __wbindgen_realloc(a: number, b: number, c: number, d: number): number;
export const __wbindgen_export_2: WebAssembly.Table;
export function _dyn_core__ops__function__FnMut__A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h1de40baa0df51db0(a: number, b: number, c: number): void;
export function __wbindgen_add_to_stack_pointer(a: number): number;
export function __wbindgen_free(a: number, b: number, c: number): void;
export function __wbindgen_exn_store(a: number): void;
export function wasm_bindgen__convert__closures__invoke2_mut__h26b6dc7d05b06fdf(a: number, b: number, c: number, d: number): void;
